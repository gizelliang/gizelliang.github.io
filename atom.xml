<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gizel&#39;s Fantasy</title>
  
  <subtitle>程式新手轉職血淚史。</subtitle>
  <link href="https://gizelliang.github.io/atom.xml" rel="self"/>
  
  <link href="https://gizelliang.github.io/"/>
  <updated>2024-05-24T02:30:30.677Z</updated>
  <id>https://gizelliang.github.io/</id>
  
  <author>
    <name>Fish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hex_Arrow Function</title>
    <link href="https://gizelliang.github.io/2024/05/22/arrowFunction/"/>
    <id>https://gizelliang.github.io/2024/05/22/arrowFunction/</id>
    <published>2024-05-21T16:29:24.000Z</published>
    <updated>2024-05-24T02:30:30.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函式表達式-Function-Expression-函式陳述式-Function-Statement"><a href="#函式表達式-Function-Expression-函式陳述式-Function-Statement" class="headerlink" title="函式表達式(Function Expression) &amp; 函式陳述式 (Function Statement)"></a>函式表達式(Function Expression) &amp; 函式陳述式 (Function Statement)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此為函式表達式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numB</span>(<span class="number">6</span>))</span><br><span class="line"><span class="keyword">const</span> numB = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Uncaught ReferenceError: numB is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>函式陳述式有Hoisting的作用，不論在陳述式前或是陳述式後，都可以呼叫函式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此為函式陳述式</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numA</span>(<span class="number">25</span>));<span class="comment">//print 625</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numA</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">numA</span>(<span class="number">4</span>));<span class="comment">//print 16</span></span><br></pre></td></tr></table></figure><h2 id="箭頭函式寫法"><a href="#箭頭函式寫法" class="headerlink" title="箭頭函式寫法"></a>箭頭函式寫法</h2><ol><li>如果函式搭配到Return<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numberA = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Arrow Function, Return 可省略</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numberA</span> = (<span class="params">x</span>)=&gt;&#123; <span class="keyword">return</span> x*x&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numberB</span> = (<span class="params">x</span>)=&gt; x*x*x;</span><br></pre></td></tr></table></figure></li><li>如果只有一個參數，可以省略括號<br>多行程式碼的話，大括號就不可省略<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">numberA</span> = x=&gt;&#123; <span class="keyword">return</span> x*x&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numberB</span> = x=&gt; x*x*x;</span><br></pre></td></tr></table></figure></li><li>沒有參數，還是要有空括號<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">numberA</span> = (<span class="params"></span>)=&gt;&#123; <span class="keyword">return</span> x*x&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">numberB</span> = (<span class="params"></span>)=&gt; x*x*x;</span><br></pre></td></tr></table></figure></li></ol><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre>]]></content>
    
    
    <summary type="html">JS直播箭頭函數預錄</summary>
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="HexSchool" scheme="https://gizelliang.github.io/tags/HexSchool/"/>
    
    <category term="Video" scheme="https://gizelliang.github.io/tags/Video/"/>
    
  </entry>
  
  <entry>
    <title>Amos_Basic Selector</title>
    <link href="https://gizelliang.github.io/2024/05/21/selector1/"/>
    <id>https://gizelliang.github.io/2024/05/21/selector1/</id>
    <published>2024-05-21T07:24:43.000Z</published>
    <updated>2024-05-21T08:11:16.957Z</updated>
    
    
    <summary type="html">金魚都能懂的CSS選取器第二章</summary>
    
    
    
    <category term="HTML/CSS" scheme="https://gizelliang.github.io/categories/HTML-CSS/"/>
    
    
    <category term="Book" scheme="https://gizelliang.github.io/tags/Book/"/>
    
    <category term="Amos" scheme="https://gizelliang.github.io/tags/Amos/"/>
    
  </entry>
  
  <entry>
    <title>Hex_forEach題型</title>
    <link href="https://gizelliang.github.io/2024/05/19/forEach3/"/>
    <id>https://gizelliang.github.io/2024/05/19/forEach3/</id>
    <published>2024-05-19T09:02:41.000Z</published>
    <updated>2024-05-21T09:44:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="網頁預想呈現畫面"><a href="#網頁預想呈現畫面" class="headerlink" title="網頁預想呈現畫面"></a>網頁預想呈現畫面</h1><p><img src="https://i.imgur.com/usFRj1I.png" alt="image"></p><h2 id="每日任務-Day25-forEach補充"><a href="#每日任務-Day25-forEach補充" class="headerlink" title="每日任務 Day25 forEach補充"></a>每日任務 Day25 forEach補充</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 參數 item 代表陣列中目前正在被處理的那個元素</span></span><br><span class="line"><span class="comment">// 參數 index 代表陣列中目前正在被處理的那個元素的索引值</span></span><br><span class="line"><span class="comment">// 參數 array 代表被處理的陣列本身，在此為 data</span></span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, array</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, array);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/1gjNwl0.png" alt="Image"></p><blockquote><p>這邊需要特別提醒，在 forEach() 函式內用 return 無法停止函式進行下一個 item。除非程式碼有誤，否則並沒有中止 forEach() 的辦法</p></blockquote><h2 id="決定資料格式-HTML"><a href="#決定資料格式-HTML" class="headerlink" title="決定資料格式(HTML)"></a>決定資料格式(HTML)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>新增資料<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;stationName&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;充電站名稱&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;stationCharge&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;免費 or 付費&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Save&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="初始化一個空字串，再塞入ul-list-的innerHTML"><a href="#初始化一個空字串，再塞入ul-list-的innerHTML" class="headerlink" title="初始化一個空字串，再塞入ul.list 的innerHTML"></a>初始化一個空字串，再塞入ul.list 的innerHTML</h2><h2 id="初始化一個空物件，再塞入相對應屬性的值"><a href="#初始化一個空物件，再塞入相對應屬性的值" class="headerlink" title="初始化一個空物件，再塞入相對應屬性的值"></a>初始化一個空物件，再塞入相對應屬性的值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data=[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Charge</span>:<span class="string">&quot;Free&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Kathy Charge Station&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Charge</span>:<span class="string">&quot;Coin&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Sophie Charge Station&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Charge</span>:<span class="string">&quot;Free&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Cecilia Charge Station&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Charge</span>:<span class="string">&quot;Coin&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;George Charge Station&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.name&#125;</span>, <span class="subst">$&#123;item.Charge&#125;</span>&lt;/li&gt;`</span>;<span class="comment">// 組好list.innerHTML指定的HTML樣式</span></span><br><span class="line">    str += content</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line">list.<span class="property">innerHTML</span> = str;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> stationName = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stationName&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stationCharge = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stationCharge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn&#x27;</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stationName.<span class="property">value</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stationCharge.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">let</span> obj =&#123;&#125;;</span><br><span class="line">  obj.<span class="property">name</span> = stationName.<span class="property">value</span>;</span><br><span class="line">  obj.<span class="property">Charge</span> = stationCharge.<span class="property">value</span>;</span><br><span class="line">  data.<span class="title function_">push</span>(obj);<span class="comment">//此行程式碼只是將新增的資料先放入data中</span></span><br><span class="line">  <span class="title function_">init</span>();<span class="comment">//沒有新增的那一筆，因為需要一開始初始化的資料結構</span></span><br><span class="line">  stationName.<span class="property">value</span>=<span class="string">&quot;&quot;</span>;<span class="comment">//清空欄位</span></span><br><span class="line">  stationCharge.<span class="property">value</span>=<span class="string">&quot;&quot;</span>;<span class="comment">//清空欄位</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="將要抓資料的forEach部分用function包覆，才可以一開始就在網頁上呈現需要的HTML樣式"><a href="#將要抓資料的forEach部分用function包覆，才可以一開始就在網頁上呈現需要的HTML樣式" class="headerlink" title="將要抓資料的forEach部分用function包覆，才可以一開始就在網頁上呈現需要的HTML樣式"></a>將要抓資料的forEach部分用function包覆，才可以一開始就在網頁上呈現需要的HTML樣式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`&lt;li&gt;<span class="subst">$&#123;item.name&#125;</span>, <span class="subst">$&#123;item.Charge&#125;</span>&lt;/li&gt;`</span>;<span class="comment">// 組好list.innerHTML指定的HTML樣式</span></span><br><span class="line">    str += content</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br><span class="line">list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h2 id="插入兩個按鈕去做相對應的資料篩選-監聽區塊為div-filter區塊"><a href="#插入兩個按鈕去做相對應的資料篩選-監聽區塊為div-filter區塊" class="headerlink" title="插入兩個按鈕去做相對應的資料篩選, 監聽區塊為div.filter區塊"></a>插入兩個按鈕去做相對應的資料篩選, 監聽區塊為div.filter區塊</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;filter&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span> =<span class="string">&quot;Free&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span> =<span class="string">&quot;Coin&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stationFilter = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.filter&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stationFilter);</span><br><span class="line">stationFilter.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">nodeName</span>);</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lKXbMRE.png" alt="Image"></p><blockquote><p>stationFilter的區塊中並非所有區塊都有value, 只有點到按鈕才會觸發事件,才可以console.log(e.target.value), <strong>e.target.value</strong>在點擊到非按鈕的stationFilter區塊時，會因為沒有value而使e.target.value為<strong>undefined</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stationFilter = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.filter&#x27;</span>);</span><br><span class="line">stationFilter.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.<span class="property">target</span>.<span class="property">value</span> == <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Where you click is empty space&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">  data.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">Charge</span> == e.<span class="property">target</span>.<span class="property">value</span>)&#123;</span><br><span class="line">      str+=<span class="string">`&lt;li&gt;<span class="subst">$&#123;item.name&#125;</span>,<span class="subst">$&#123;item.Charge&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  list.<span class="property">innerHTML</span> = str;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><strong>之所以使用e.target.value而非e.target.nodeName是因為兩顆按鈕篩選出來的資料不一樣，若使用e.target.nodeName通常就是只有一顆按鈕</strong></p></blockquote><blockquote><p><strong>e</strong>會把事件觸發時的物件狀態快照起來,event通常在大括號中存活,Function結束時就會消失,<strong>e.target</strong> 會呈現出當下點擊到的HTML架構</p></blockquote><blockquote><p><strong>e.target.nodeName</strong>則會呈現出當下的ＨＴＭＬ標籤(例如~INPUT,LI)</p></blockquote><blockquote><p>innerHTML會將其中的HTML全部清空後再帶入要塞入的內容</p></blockquote><blockquote><p><strong>const list</strong> 有被重複使用到,所以可以拉到最外層, init()上方，作為全域變數</p></blockquote>]]></content>
    
    
    <summary type="html">六角學院JS直播forEach練習</summary>
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="HexSchool" scheme="https://gizelliang.github.io/tags/HexSchool/"/>
    
    <category term="Video" scheme="https://gizelliang.github.io/tags/Video/"/>
    
  </entry>
  
  <entry>
    <title>WesBos_Scope</title>
    <link href="https://gizelliang.github.io/2024/05/18/scope/"/>
    <id>https://gizelliang.github.io/2024/05/18/scope/</id>
    <published>2024-05-18T12:30:47.000Z</published>
    <updated>2024-05-19T09:38:32.532Z</updated>
    
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="Video" scheme="https://gizelliang.github.io/tags/Video/"/>
    
    <category term="WesBos" scheme="https://gizelliang.github.io/tags/WesBos/"/>
    
  </entry>
  
  <entry>
    <title>WesBos_Debugging</title>
    <link href="https://gizelliang.github.io/2024/05/18/debugging/"/>
    <id>https://gizelliang.github.io/2024/05/18/debugging/</id>
    <published>2024-05-18T11:35:21.000Z</published>
    <updated>2024-05-19T09:31:53.151Z</updated>
    
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="Video" scheme="https://gizelliang.github.io/tags/Video/"/>
    
    <category term="WesBos" scheme="https://gizelliang.github.io/tags/WesBos/"/>
    
  </entry>
  
  <entry>
    <title>WesBos_Function</title>
    <link href="https://gizelliang.github.io/2024/05/14/function/"/>
    <id>https://gizelliang.github.io/2024/05/14/function/</id>
    <published>2024-05-14T04:13:16.000Z</published>
    <updated>2024-05-19T09:31:26.711Z</updated>
    
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="Video" scheme="https://gizelliang.github.io/tags/Video/"/>
    
    <category term="WesBos" scheme="https://gizelliang.github.io/tags/WesBos/"/>
    
  </entry>
  
  <entry>
    <title>008Days_Day 1</title>
    <link href="https://gizelliang.github.io/2024/05/14/operator1/"/>
    <id>https://gizelliang.github.io/2024/05/14/operator1/</id>
    <published>2024-05-14T03:58:33.000Z</published>
    <updated>2024-05-21T08:13:27.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="變數命名原則"><a href="#變數命名原則" class="headerlink" title="變數命名原則"></a>變數命名原則</h1><h2 id="變數架構"><a href="#變數架構" class="headerlink" title="變數架構"></a>變數架構</h2><p><img src="https://i.imgur.com/ia79Zze.png" alt="image"></p><ul><li>變數的命名的首尾可以為<code>英文字母,底線,或是$</code></li><li>Javascript 可以用中文命名,但有可能會亂碼</li><li>不可以是<code>Reserved Words 保留字</code> or <code>關鍵字 keyword</code></li><li>Javascript的語法是有<code>區分大小寫</code>的</li><li>Javascript是一個<code>弱型別</code>的語言, 宣告時無需指定型別,型別的資訊只在<code>值</code> 或 <code>物件</code> 本身才有型別的資訊,<strong>變數沒有型別,值才有</strong></li></ul><h1 id="變數的宣告"><a href="#變數的宣告" class="headerlink" title="變數的宣告"></a>變數的宣告</h1><ul><li><p>未經宣告只賦予值,造成<code>全域變數</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">//print 1</span></span><br></pre></td></tr></table></figure></li><li><p>有宣告但未賦予值, 變數預設為<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>未經宣告但就要去使用時，出現<code>ReferenceError</code> 的錯誤</p></li><li><p><strong>var</strong>可以<code>重複宣告</code>同一變數，但<strong>let</strong>不能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n =<span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> n=<span class="number">4</span>;<span class="comment">//Uncaught Syntax Error</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="變數的型別簡介及例外"><a href="#變數的型別簡介及例外" class="headerlink" title="變數的型別簡介及例外"></a>變數的型別簡介及例外</h1><h2 id="基本型別-Primitives"><a href="#基本型別-Primitives" class="headerlink" title="基本型別 (Primitives)"></a>基本型別 (Primitives)</h2><ul><li>String</li><li>Number</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>Symbol <code>After ES6</code></li></ul><h2 id="基本型別的例外"><a href="#基本型別的例外" class="headerlink" title="基本型別的例外"></a>基本型別的例外</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;<span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">alert</span>; <span class="comment">//function</span></span><br></pre></td></tr></table></figure><hr><h3 id="String-字串"><a href="#String-字串" class="headerlink" title="String 字串"></a>String 字串</h3><ul><li>不可單引號包單引號，也不可雙引號包雙引號, 若真的有這樣的情況，可以使用跳脫字元<code>\</code><strong>Escape Character</strong></li><li>多組的字串,可以用<code>+</code>連接</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Let\&#x27;s go!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">&quot;Hello&quot;</span>+<span class="string">&quot;World&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="樣板字面值-Template-Literal"><a href="#樣板字面值-Template-Literal" class="headerlink" title="樣板字面值 (Template Literal)"></a>樣板字面值 (Template Literal)</h3><ul><li><em><strong><code>$&#123;&#125;</code></strong></em> 可以直接置入運算式 &amp; 變數</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fifteen is <span class="subst">$&#123;a+b&#125;</span> and not <span class="subst">$&#123;<span class="number">2</span>*a + b&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h3 id="數字-Number"><a href="#數字-Number" class="headerlink" title="數字 (Number)"></a>數字 (Number)</h3><ul><li>JS只有一種數值的型別,就是number, 不管是整數或帶有小數點的浮點數字皆屬於這一類</li><li>Infinity (無限大), -Infinity（負無限大), NaN(不是數值,Not a Number)</li></ul><ol><li>正數除以0 &#x3D;&gt; <code>Infinity 無限大</code></li><li>負數除以0 &#x3D;&gt; <code>-Infinity 負無限大</code></li><li>0&#x2F;0, Infinity&#x2F;Infinity, -Infinity&#x2F;-Infinity &#x3D;&gt;<code>NaN</code></li></ol><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">typeof</span>(<span class="title class_">NaN</span>); <span class="comment">//&#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>NaN</code>與任何數字作運算，結果都是<code>NaN</code>,也就是說,<code>NaN</code>並不等於任何的數字，甚至是自己<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;123&quot;</span>) <span class="comment">//false String 會透過隱含的Number()轉型成數字</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;NaN&quot;</span>)<span class="comment">//true 因為字串&quot;NaN&quot;無法轉型成數字</span></span><br></pre></td></tr></table></figure></li><li>十進位的小數無法完美的用<code>二進位</code>的方式表示，只能用無限循環的位數來趨近於十進位的小數<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li>要數字精準的話，可將小數點在運算錢轉成整數，計算後再調整回來</li></ul><h3 id="布林值-True-False"><a href="#布林值-True-False" class="headerlink" title="布林值 (True &amp; False)"></a>布林值 (True &amp; False)</h3><ul><li>通常用在<code>判斷式</code>,作為控制<code>程式流程</code>的用途</li></ul><h3 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null &amp; undefined"></a>null &amp; undefined</h3><blockquote><p>null 與 undefined的共通點就是, null只有一種值就是<code>null</code>, undefined 也只有一種值就是<code>undefined</code></p></blockquote><ul><li>此兩者透過<code>Boolean()</code>強制轉型成Boolean時，都會代表<code>false</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>);<span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><blockquote><p>undefined 代表<code>尚未給值, 未定義</code>, null則表示<code>此變數沒有值</code></p></blockquote></li></ul><h2 id="物件-Object"><a href="#物件-Object" class="headerlink" title="物件 (Object)"></a>物件 (Object)</h2><blockquote><p>所有基本型別(Primitives)以外的值都是物件, <code>零至多種屬性的集合</code></p></blockquote>]]></content>
    
    
    <summary type="html">008天重新認識Javascript 第一章</summary>
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="008Days" scheme="https://gizelliang.github.io/tags/008Days/"/>
    
    <category term="Book" scheme="https://gizelliang.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>008Days_Day 2</title>
    <link href="https://gizelliang.github.io/2024/05/06/operator2/"/>
    <id>https://gizelliang.github.io/2024/05/06/operator2/</id>
    <published>2024-05-06T12:56:16.000Z</published>
    <updated>2024-05-21T08:09:16.604Z</updated>
    
    
    <summary type="html">008天重新認識Javascript 第二章</summary>
    
    
    
    <category term="Javascript" scheme="https://gizelliang.github.io/categories/Javascript/"/>
    
    
    <category term="008Days" scheme="https://gizelliang.github.io/tags/008Days/"/>
    
    <category term="Book" scheme="https://gizelliang.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>self-introduction</title>
    <link href="https://gizelliang.github.io/2024/04/26/self-introduction/"/>
    <id>https://gizelliang.github.io/2024/04/26/self-introduction/</id>
    <published>2024-04-26T05:18:11.000Z</published>
    <updated>2024-05-14T03:48:02.916Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
